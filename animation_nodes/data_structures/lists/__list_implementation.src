cimport cython
from libc.string cimport memcpy, memmove, memcmp, memset
from cpython cimport PyMem_Malloc, PyMem_Realloc, PyMem_Free
from . utils cimport predictSliceLength, makeStepPositive, removeValuesInSlice, getValuesInSlice

cdef class LISTNAME(CList):

    # Initialization and Memory Management
    ###############################################

    def __cinit__(self, Py_ssize_t length = 0, Py_ssize_t capacity = -1):
        '''
        Initialize a new object with the given length.
        You can also directly allocate more memory from the beginning
        to allow faster appending/extending without memory reallocation.
        '''
        if length < 0:
            raise ValueError("Length has to be >= 0")
        if capacity < length:
            capacity = length
        self.data = <TYPE*>PyMem_Malloc(sizeof(TYPE) * capacity)
        if self.data == NULL:
            raise MemoryError()

        self.length = length
        self.capacity = capacity

    def __dealloc__(self):
        if self.data != NULL:
            PyMem_Free(self.data)

    cdef grow(self, Py_ssize_t minCapacity):
        if minCapacity < self.capacity:
            return

        cdef Py_ssize_t newCapacity = self.capacity * 2 + 1
        if newCapacity < minCapacity:
            newCapacity = minCapacity

        self.data = <TYPE*>PyMem_Realloc(self.data, sizeof(TYPE) * newCapacity)
        if self.data == NULL:
            self.length = 0
            self.capacity = 0
            raise MemoryError()
        self.capacity = newCapacity

    cdef void shrinkToLength(self):
        cdef Py_ssize_t newCapacity = max(1, self.length)
        self.data = <TYPE*>PyMem_Realloc(self.data, sizeof(TYPE) * newCapacity)
        self.capacity = newCapacity

    cdef replaceArray(self, TYPE* newData, Py_ssize_t newLength, Py_ssize_t newCapacity):
        PyMem_Free(self.data)
        self.data = newData
        self.length = newLength
        self.capacity = newCapacity



    # Parent Class Methods
    ###############################################

    cdef void* getPointer(self):
        return self.data

    cdef int getElementSize(self):
        return sizeof(TYPE)

    cdef Py_ssize_t getLength(self):
        return self.length

    cdef Py_ssize_t getCapacity(self):
        return self.capacity



    # Special Methods for Python
    ###############################################

    def __len__(self):
        return self.length

    def __getitem__(self, key):
        cdef TYPE element
        if isinstance(key, int):
            element = self.getValueAtIndex(key)
            return self.toPyObject(&element)
        elif isinstance(key, slice):
            return self.getValuesInSlice(key)
        elif hasattr(key, "__iter__"):
            return self.getValuesInIndexList(key)
        else:
            raise TypeError("Expected int, slice or index list object")

    def __setitem__(self, key, value):
        cdef TYPE _value
        if isinstance(key, int):
            self.tryConversion(value, &_value)
            self.setValueAtIndex(key, _value)
        elif isinstance(key, slice):
            self.setValuesInSlice(key, value)
        else:
            raise TypeError("Expected int or slice object")

    def __delitem__(self, key):
        if isinstance(key, int):
            self.removeValueAtIndex(key)
        elif isinstance(key, slice):
            self.removeValuesInSlice(key)
        else:
            raise TypeError("Expected int or slice object")

    def __add__(a, b):
        cdef LISTNAME newList
        try:
            newList = LISTNAME(capacity = len(a) + len(b))
            newList.extend(a)
            newList.extend(b)
        except:
            raise NotImplementedError()
        return newList

    def __mul__(a, b):
        if isinstance(a, LISTNAME):
            return a.repeated(amount = max(0, b))
        else:
            return b.repeated(amount = max(0, a))

    def __iadd__(LISTNAME self, other):
        try:
            self.extend(other)
        except:
            raise NotImplementedError()
        return self

    def __iter__(self):
        return LISTNAMEIterator(self)

    def __contains__(self, value):
        cdef TYPE _value
        self.tryConversion(value, &_value)
        cdef Py_ssize_t i
        for i in range(self.length):
            if EQUALS(self.data[i], _value):
                return True
        return False

    def __richcmp__(x, y, int operation):
        if operation == 2: # ==
            if type(x) == type(y):
                return (<LISTNAME>x).equals_SameType(y)
            if len(x) == len(y):
                return all(a == b for a, b in zip(x, y))
            return False
        elif operation == 3: # !=
            if type(x) == type(y):
                return not (<LISTNAME>x).equals_SameType(y)
            if len(x) == len(y):
                return any(a != b for a, b in zip(x, y))
            return True

        raise NotImplementedError()

    cdef equals_SameType(self, LISTNAME other):
        if self.length != other.length:
            return False
        cdef Py_ssize_t i
        for i in range(self.length):
            if not EQUALS(self.data[i], other.data[i]): return False
        return True


    # Base operations for lists - mimic python list
    ###############################################

    def copy(self):
        newList = LISTNAME(self.length)
        newList.overwrite(self)
        return newList

    def clear(self):
        self.length = 0
        self.shrinkToLength()

    def fill(self, value):
        cdef Py_ssize_t i
        cdef TYPE _value
        if value == 0:
            memset(self.data, 0, self.length * sizeof(TYPE))
        else:
            self.tryConversion(value, &_value)
            for i in range(self.length):
                self.data[i] = _value

    def append(self, value):
        if self.length >= self.capacity:
            self.grow(self.length + 1)
        self.tryConversion(value, self.data + self.length)
        self.length += 1

    def extend(self, values):
        cdef Py_ssize_t oldLength, newLength, i
        if isinstance(values, LISTNAME):
            self.overwrite(values, self.length)
        elif isinstance(values, list):
            self.extendList(values)
        elif isinstance(values, tuple):
            self.extendTuple(values)
        elif hasattr(values, "__len__"):
            newLength = self.length + len(values)
            self.grow(newLength)
            for i, value in enumerate(values, start = self.length):
                self.tryConversion(value, self.data + i)
            self.length = newLength
        else:
            try:
                oldLength = self.length
                for value in values:
                    self.append(value)
            except:
                self.length = oldLength
                raise TypeError("invalid input")

    cdef extendList(self, list values):
        cdef Py_ssize_t newLength, i
        newLength = self.length + len(values)
        self.grow(newLength)
        for i in range(len(values)):
            self.tryConversion(values[i], self.data + self.length + i)
        self.length = newLength

    cdef extendTuple(self, tuple values):
        cdef Py_ssize_t newLength, i
        newLength = self.length + len(values)
        self.grow(newLength)
        for i in range(len(values)):
            self.tryConversion(values[i], self.data + self.length + i)
        self.length = newLength

    def index(self, value):
        cdef TYPE _value
        self.tryConversion(value, &_value)
        cdef Py_ssize_t index = self.searchIndex(_value)
        if index >= 0: return index
        raise ValueError("value not in list")

    cdef Py_ssize_t searchIndex(self, TYPE value):
        cdef Py_ssize_t i
        for i in range(self.length):
            if EQUALS(self.data[i], value):
                return i
        return -1

    def count(self, value):
        cdef TYPE _value
        self.tryConversion(value, &_value)
        cdef Py_ssize_t i
        cdef Py_ssize_t amount = 0
        for i in range(self.length):
            if EQUALS(self.data[i], _value):
                amount += 1
        return amount

    def remove(self, value):
        cdef TYPE _value
        self.tryConversion(value, &_value)
        cdef Py_ssize_t index = self.searchIndex(_value)
        if index == -1:
            raise ValueError("value not in list")
        else:
            self.removeValueAtIndex(index)

    def insert(self, Py_ssize_t index, value):
        cdef TYPE _value
        if index >= self.length:
            self.append(value)
        else:
            self.tryConversion(value, &_value)
            self.grow(self.length + 1)
            if index < 0: index += self.length
            if index < 0: index = 0
            memmove(self.data + index + 1,
                    self.data + index,
                    sizeof(TYPE) * (self.length - index))
            self.data[index] = _value
            self.length += 1



    # Get/Set/Remove single element
    ################################################

    cdef getValueAtIndex(self, Py_ssize_t index):
        index = self.tryCorrectIndex(index)
        return self.data[index]

    cdef setValueAtIndex(self, Py_ssize_t index, TYPE value):
        index = self.tryCorrectIndex(index)
        self.data[index] = value

    cdef removeValueAtIndex(self, Py_ssize_t index):
        index = self.tryCorrectIndex(index)
        memmove(self.data + index,
                self.data + index + 1,
                (self.length - index) * sizeof(TYPE))
        self.length -= 1


    # Get/Set/Remove elements in slice
    ################################################

    cdef LISTNAME getValuesInSlice(self, slice sliceObject):
        cdef:
            void* newArray
            Py_ssize_t newLength
            LISTNAME newList

        getValuesInSlice(self.data, self.length, sizeof(TYPE),
                         &newArray, &newLength, sliceObject)

        newList = LISTNAME()
        newList.replaceArray(<TYPE*>newArray, newLength, newLength)
        return newList

    cdef setValuesInSlice(self, slice sliceObject, values):
        cdef Py_ssize_t start, stop, step
        start, stop, step = sliceObject.indices(len(self))

        if step == 1:
            self.setValuesInSimpleSlice(start, stop, values)
        else:
            self.setValuesInExtendedSlice(start, stop, step, values)

    cdef setValuesInSimpleSlice(self, Py_ssize_t start, Py_ssize_t stop, values):
        cdef:
            Py_ssize_t replacementLength = len(values)
            Py_ssize_t sliceLength = predictSliceLength(start, stop, 1)

        if replacementLength > sliceLength:
            self.grow(self.length + (replacementLength - sliceLength))
        if replacementLength != sliceLength:
            memmove(self.data + start + replacementLength,
                    self.data + stop,
                    sizeof(TYPE) * (self.length - stop))
            self.length += replacementLength - sliceLength

        cdef Py_ssize_t i
        cdef TYPE _value
        if isinstance(values, LISTNAME):
            self.overwrite(values, start)
        else:
            for i in range(replacementLength):
                self.tryConversion(values[i], self.data + start + i)

    cdef setValuesInExtendedSlice(self, Py_ssize_t start, Py_ssize_t stop, Py_ssize_t step, values):
        cdef Py_ssize_t sliceLength = predictSliceLength(start, stop, step)
        if sliceLength != len(values):
            raise ValueError("attempt to assign sequence of size {} to extended slice of size {}"
                             .format(len(values), sliceLength))

        # TODO: Speedup for specific list types + use while loop
        # range does not efficiently work with a variable step
        cdef Py_ssize_t i
        for i, value in zip(range(start, stop, step), values):
            self.tryConversion(value, self.data + i)

    cdef removeValuesInSlice(self, slice sliceObject):
        cdef Py_ssize_t start, stop, step
        start, stop, step = sliceObject.indices(len(self))
        cdef Py_ssize_t removeAmount = removeValuesInSlice(
                      arrayStart = <char*>self.data,
                      arrayLength = self.length * sizeof(TYPE),
                      elementSize = sizeof(TYPE),
                      start = start, stop = stop, step = step)
        self.length -= removeAmount


    # Get/Set/Remove elements in index list
    ################################################

    cdef getValuesInIndexList(self, indices):
        # TODO: optimize for some data types
        cdef LISTNAME newList = LISTNAME()
        cdef long index
        cdef TYPE element
        for index in indices:
            element = self.getValueAtIndex(index)
            newList.append(self.toPyObject(&element))
        return newList


    # Low level utilities
    ###############################################

    cdef tryConversion(self, value, TYPE* target):
TRY_CONVERSION_CODE

    cdef toPyObject(self, TYPE* value):
TO_PYOBJECT_CODE

    cdef tryCorrectIndex(self, Py_ssize_t index):
        if index < 0:
            index += self.length
        if index < 0 or index >= self.length:
            raise IndexError("list index out of range")
        return index

    cdef overwrite(self, LISTNAME other, Py_ssize_t index = 0):
        if self.capacity < index + other.length:
            self.grow(index + other.length)
        memcpy(self.data + index, other.data, other.length * sizeof(TYPE))
        self.length = max(self.length, index + other.length)

    cdef overwriteArray(self, TYPE* array, Py_ssize_t arrayLength, Py_ssize_t index):
        if self.capacity <= index + arrayLength:
            self.grow(index + arrayLength)
        memcpy(self.data + index, array, arrayLength * sizeof(TYPE))
        self.length = max(self.length, index + arrayLength)


    # Memory Views
    ###############################################

    def asMemoryView(self):
        if "MEMVIEW" == "NotExistentType":
            raise NotImplementedError("Cannot create memoryview for this type")

        cdef MEMVIEW[:] memview
        if self.length > 0:
            memview = <MEMVIEW[:self.length * sizeof(TYPE) // sizeof(MEMVIEW)]><MEMVIEW*>self.data
        else:
            # hack to make zero-length memview possible
            memview = (<MEMVIEW[:1]><MEMVIEW*>self.data)[1:]
        return memview

    def asNumpyArray(self):
        import numpy
        return numpy.asarray(self.asMemoryView())


    # Classmethods for List Creation
    ###############################################

    @classmethod
    def join(cls, *sourceLists):
        cdef Py_ssize_t newLength = 0
        cdef Py_ssize_t offset = 0
        cdef LISTNAME source

        for source in sourceLists:
            newLength += len(source)
        newList = LISTNAME(newLength)
        for source in sourceLists:
            newList.overwrite(source, offset)
            offset += source.length

        return newList

    @classmethod
    def fromValues(cls, values):
        if isinstance(values, (list, tuple)):
            return cls.fromListOrTuple(values)

        try:
            from . convert import toLISTNAME
            return toLISTNAME(values)
        except (ImportError, TypeError): pass

        cdef LISTNAME newList = LISTNAME()
        newList.extend(values)
        return newList

    @classmethod
    def fromValue(cls, value, length = 1):
        return LISTNAME.fromValues([value]) * length

    @classmethod
    def fromListOrTuple(cls, list_or_tuple values):
        cdef LISTNAME newList = LISTNAME(len(values))
        cdef Py_ssize_t i
        for i, value in enumerate(values):
            newList.tryConversion(value, newList.data + i)
        return newList

    @classmethod
    def fromNumpyArray(cls, MEMVIEW [:] input):
        cdef MEMVIEW* inputPointer = &input[0]
        cdef int length = input.shape[0] // (sizeof(TYPE) // sizeof(MEMVIEW))
        cdef LISTNAME values = LISTNAME(length = length)
        memcpy(values.data, inputPointer, length * sizeof(TYPE))
        return values


    # String Representations
    ###############################################

    def __repr__(self):
        if self.length < 20:
            return "<LISTNAME [{}]>".format(", ".join(str(self[i]) for i in range(self.length)))
        else:
            return "<LISTNAME [{}, ...]>".format(", ".join(str(self[i]) for i in range(20)))

    def status(self):
        return "Length: {}, Capacity: {}, Size: {} bytes".format(
            self.length, self.capacity, self.capacity * sizeof(TYPE))


    # Type Specific Methods
    ###############################################

MORE_METHODS


cdef class LISTNAMEIterator:
    '''
    Implements the 'Iterator Protocol' that is used to allow iteration
    over a custom list object (eg with a for loop).
    An instance of this class is only created in the __iter__ method
    of the corresponding list type.
    https://docs.python.org/3.5/library/stdtypes.html#iterator-types
    '''
    cdef:
        LISTNAME source
        Py_ssize_t current

    def __cinit__(self, LISTNAME source):
        self.source = source
        self.current = 0

    def __iter__(self):
        return self

    def __next__(self):
        if self.current >= self.source.length:
            raise StopIteration()
        cdef TYPE currentValue = self.source.data[self.current]
        self.current += 1
        return self.source.toPyObject(&currentValue)
